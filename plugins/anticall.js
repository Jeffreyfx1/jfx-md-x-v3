const { cmd } = require("../command");
const config = require("../config");
const fs = require("fs");
const path = require("path");

const recentCallers = new Set();

// ‚úÖ Verified Contact (reuse across both parts)
const verifiedContact = {
    key: {
        fromMe: false,
        participant: `0@s.whatsapp.net`,
        remoteJid: "status@broadcast"
    },
    message: {
        contactMessage: {
            displayName: "·¥äÍú∞x ·¥ç·¥Ö-x·¥†3",
            vcard: "BEGIN:VCARD\nVERSION:3.0\nFN: ·¥ä·¥á·¥ò ú·¥õ·¥á Ä ·¥õ·¥á·¥Ñ ú\nORG:·¥äÍú∞x ·¥ç·¥Ö-x·¥†3;\nTEL;type=CELL;type=VOICE;waid=93775551335:+2349046157539\nEND:VCARD"
        }
    }
};

// ‚úÖ Common channel forward context
const channelContext = {
    forwardingScore: 999,
    isForwarded: true,
    forwardedNewsletterMessageInfo: {
        newsletterJid: '120363420646690174@newsletter',
        newsletterName: '·¥äÍú∞x ·¥ç·¥Ö-x·¥†3',
        serverMessageId: 143
    }
};

// Anti-call event handler
cmd({ on: "body" }, async (client, message, chat, { from: sender }) => {
    try {
        client.ev.on("call", async (callData) => {
            if (!config.ANTI_CALL) return;

            for (const call of callData) {
                if (call.status === 'offer' && !call.isGroup) {
                    await client.rejectCall(call.id, call.from);
                    
                    if (!recentCallers.has(call.from)) {
                        recentCallers.add(call.from);

                        // Random image from /src
                        const srcDir = path.join(__dirname, "../src");
                        const images = fs.readdirSync(srcDir).filter(f => f.match(/\.(jpg|jpeg|png|webp)$/i));
                        const selectedImage = images.length > 0 
                            ? path.join(srcDir, images[Math.floor(Math.random() * images.length)]) 
                            : null;

                        await client.sendMessage(call.from, {
                            image: selectedImage ? fs.readFileSync(selectedImage) : null,
                            caption: "``` ú…™ ·¥õ ú…™Íú± …™Íú± ·¥äÍú∞x ·¥ç·¥Ö-x·¥†3 ·¥Ä ·¥ò·¥á ÄÍú±·¥è…¥·¥Ä ü ·¥ÄÍú±Íú±…™Íú±·¥õ·¥Ä…¥·¥õ!! ·¥Ñ·¥Ä ü üÍú± ·¥Ä Ä·¥á …¥·¥è·¥õ ·¥Ä ü ü·¥è·¥°·¥á·¥Ö. Íú∞·¥è Ä Íú±·¥ú·¥ò·¥ò·¥è Ä·¥õ, ·¥Ñ ú·¥Ä·¥õ ·¥è·¥°…¥·¥á Ä.```",
                            contextInfo: { ...channelContext, mentionedJid: [call.from] }
                        }, { quoted: verifiedContact });
                        
                        setTimeout(() => recentCallers.delete(call.from), 600000);
                    }
                }
            }
        });
    } catch (error) {
        console.error("Call rejection error:", error);
        await client.sendMessage(sender, { text: "‚ö†Ô∏è Error: " + error.message }, { quoted: chat });
    }
});

// Anti-call command with random local image + verified contact
cmd({
    pattern: "anticall",
    alias: ["callblock", "togglecall"],
    desc: "Toggle call blocking feature",
    category: "owner",
    react: "üìû",
    filename: __filename,
    fromMe: true
},
async (client, message, m, { isOwner, from, sender, args }) => {
    try {
        if (!isOwner) {
            return client.sendMessage(from, { 
                text: "·¥è·¥°…¥·¥á Ä-·¥è…¥ ü è ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö",
                mentions: [sender]
            }, { quoted: message });
        }

        const action = args[0]?.toLowerCase() || 'status';
        let statusText, reaction = "üìû", additionalInfo = "";

        switch (action) {
            case 'on':
                if (config.ANTI_CALL) {
                    statusText = "·¥Ä…¥·¥õ…™-·¥Ñ·¥Ä ü ü …™Íú± ·¥Ä ü Ä·¥á·¥Ä·¥Ö è *·¥á…¥·¥Ä ô ü·¥á·¥Ö*";
                    reaction = "‚ÑπÔ∏è";
                } else {
                    config.ANTI_CALL = true;
                    statusText = "·¥Ä…¥·¥õ…™-·¥Ñ·¥Ä ü ü  ú·¥ÄÍú±  ô·¥á·¥á…¥ *·¥á…¥·¥Ä ô ü·¥á·¥Ö*! ‚úÖ";
                    additionalInfo = "·¥Ñ·¥Ä ü üÍú± ·¥°…™ ü ü  ô·¥á ·¥Ä·¥ú·¥õ·¥è- Ä·¥á·¥ä·¥á·¥Ñ·¥õ·¥á·¥Ö";
                    reaction = "‚úÖ";
                }
                break;
                
            case 'off':
                if (!config.ANTI_CALL) {
                    statusText = "·¥Ä…¥·¥õ…™-·¥Ñ·¥Ä ü ü …™Íú± ·¥Ä ü Ä·¥á·¥Ä·¥Ö è *·¥Ö…™Íú±·¥Ä ô ü·¥á·¥Ö*";
                    reaction = "‚ÑπÔ∏è";
                } else {
                    config.ANTI_CALL = false;
                    statusText = "·¥Ä…¥·¥õ…™-·¥Ñ·¥Ä ü ü  ú·¥ÄÍú±  ô·¥á·¥á…¥ *·¥Ö…™Íú±·¥Ä ô ü·¥á·¥Ö*! ‚ùå";
                    additionalInfo = "·¥Ñ·¥Ä ü üÍú± ·¥Ä Ä·¥á ·¥Ä ü ü·¥è·¥°·¥á·¥Ö";
                    reaction = "‚ùå";
                }
                break;
                
            default:
                statusText = `·¥Ä…¥·¥õ…™-·¥Ñ·¥Ä ü ü Íú±·¥õ·¥Ä·¥õ·¥úÍú±: ${config.ANTI_CALL ? "‚úÖ *·¥á…¥·¥Ä ô ü·¥á·¥Ö*" : "‚ùå *·¥Ö…™Íú±·¥Ä ô ü·¥á·¥Ö*"}`;
                additionalInfo = config.ANTI_CALL ? "Calls are being blocked" : "Calls are allowed";
                break;
        }

        // Random local image
        const srcDir = path.join(__dirname, "../src");
        const images = fs.readdirSync(srcDir).filter(f => f.match(/\.(jpg|jpeg|png|webp)$/i));
        const selectedImage = images.length > 0 
            ? path.join(srcDir, images[Math.floor(Math.random() * images.length)]) 
            : null;

        // Send with verified contact + forwarded channel context
        await client.sendMessage(from, {
            image: selectedImage ? fs.readFileSync(selectedImage) : null,
            caption: `${statusText}\n\n${additionalInfo}\n\n_·¥äÍú∞x ·¥ç·¥Ö-x·¥†3_`,
            contextInfo: { ...channelContext, mentionedJid: [sender] }
        }, { quoted: verifiedContact });

        // React back
        await client.sendMessage(from, { react: { text: reaction, key: message.key } });

    } catch (error) {
        console.error("Anti-call command error:", error);
        await client.sendMessage(from, {
            text: `‚ö†Ô∏è Error: ${error.message}`,
            mentions: [sender]
        }, { quoted: message });
    }
});
