const fs = require('fs');
const path = require('path');
const { cmd } = require('../command');
const moment = require('moment-timezone');

cmd({
  pattern: "allmenu",
  alias: ["commandlist", "help"],
  desc: "Fetch and display all available bot commands",
  category: "system",
  filename: __filename,
}, async (Void, m, text, { prefix }) => {
  try {
    const commandDir = path.join(__dirname, '../plugins');
    const commandFiles = fs.readdirSync(commandDir).filter(file => file.endsWith('.js'));

    let totalCommands = 0;
    let commandList = [];

    for (const file of commandFiles) {
      const filePath = path.join(commandDir, file);
      const content = fs.readFileSync(filePath, 'utf-8');
      const matches = content.match(/pattern:\s*["'`](.*?)["'`]/g);
      
      if (matches) {
        const extracted = matches.map(x => x.split(':')[1].replace(/["'`,]/g, '').trim());
        totalCommands += extracted.length;
        commandList.push(`üßö‚Äç‚ôÄÔ∏è *${file}*\n${extracted.map(cmd => `üí´ ${cmd}`).join('\n')}`);
      }
    }

    const time = moment().tz('Africa/Kampala').format('HH:mm:ss');
    const date = moment().tz('Africa/Kampala').format('dddd, MMMM Do YYYY');

    const caption = `
‚ï≠‚îÅ‚îÅ‚îÅ„Ää *·¥äÍú∞x ·¥ç·¥Ö-x·¥†3* „Äã‚îÅ‚îÅ‚îÅ‚ïÆ
‚îÉ ‚ú¶‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚îÉ ‚ú¶‚îÇ‚ñ∏ Us·¥á Ä       : ·¥ä·¥á·¥ò ú·¥õ·¥á Ä ·¥õ·¥á·¥Ñ ú
‚îÉ ‚ú¶‚îÇ‚ñ∏  ô·¥Ä…™ ü·¥á ès    : ùêåùêÆùê•ùê≠ùê¢ ùêÉùêûùêØùê¢ùêúùêû
‚îÉ ‚ú¶‚îÇ‚ñ∏ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös   :*${totalCommands}*
‚îÉ ‚ú¶‚îÇ‚ñ∏ ·¥ò ü·¥Ä·¥õ“ì·¥è Ä·¥ç   :  Ä·¥á…¥·¥Ö·¥á Ä
‚îÉ ‚ú¶‚îÇ‚ñ∏ ùñµ·¥á Äs…™·¥è…¥    : 3.ùüé.ùüé
‚îÉ ‚ú¶‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚ï∞‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îà‚ä∑\n\n${commandList.join('\n\n')}`;

    // Pick a random local image from src folder
    const srcDir = path.join(__dirname, '../src');
    const srcFiles = fs.readdirSync(srcDir).filter(file => file.match(/\.(jpg|jpeg|png|webp)$/i));
    const randomImage = path.join(srcDir, srcFiles[Math.floor(Math.random() * srcFiles.length)]);

    // ‚úÖ Verified Contact (from about.js)
    const verifiedContact = {
      key: {
        fromMe: false,
        participant: `0@s.whatsapp.net`,
        remoteJid: "status@broadcast"
      },
      message: {
        contactMessage: {
          displayName: "·¥äÍú∞x ·¥ç·¥Ö-x·¥†3",
          vcard: "BEGIN:VCARD\nVERSION:3.0\nFN: ·¥ä·¥á·¥ò ú·¥õ·¥á Ä ·¥õ·¥á·¥Ñ ú\nORG:·¥äÍú∞x ·¥ç·¥Ö-x·¥†3;\nTEL;type=CELL;type=VOICE;waid=93775551335:+2349046157539\nEND:VCARD"
        }
      }
    };

    const messageOptions = {
      image: fs.readFileSync(randomImage),
      caption: caption,
      contextInfo: {
        forwardingScore: 999,
        isForwarded: true,
        mentionedJid: [m.sender],
        forwardedNewsletterMessageInfo: {
          newsletterJid: "120363420646690174@newsletter",
          newsletterName: "·¥äÍú∞x ·¥ç·¥Ö-x·¥†3",
          serverMessageId: 2
        },
        externalAdReply: {
          title: "·¥äÍú∞x ·¥ç·¥Ö-x·¥†3",
          body: `·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è ·¥ä·¥á·¥ò ú·¥õ·¥á Ä ·¥õ·¥á·¥Ñ ú`,
          mediaType: 1,
          thumbnail: fs.readFileSync(randomImage), // local thumbnail
          sourceUrl: "https://github.com/Jeffreyfx1/jfx-md-x-v3"
        }
      }
    };

    // Send with verified contact as quote
    await Void.sendMessage(m.chat, messageOptions, { quoted: verifiedContact });

  } catch (err) {
    console.error(err);
    await m.reply('‚ùå Error: Could not fetch the command list.');
  }
});
