const config = require('../config');
const { cmd, commands } = require('../command');
const { runtime } = require('../lib/functions');
const axios = require('axios');
const os = require("os");
const fs = require("fs");
const path = require("path");

function isEnabled(value) {
    // Function to check if a value represents a "true" boolean state
    return value && value.toString().toLowerCase() === "true";
}

cmd({
    pattern: "env",
    alias: ["settings","setting", "allvar"],
    desc: "Settings of bot",
    category: "menu",
    react: "‚§µÔ∏è",
    filename: __filename
}, 
async (conn, mek, m, { from, quoted, reply }) => {
    try {
        // Define the settings message with the correct boolean checks
        let envSettings = `
 ‚ï≠„Äî *„Äê·¥äÍú∞x ·¥ç·¥Ö-x·¥†3 „Äë* „Äï‚ä∑
‚îÉ‚ñ∏‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚îÉ‚ñ∏‚îÉ‡πè *·¥á…¥·¥† Íú±·¥á·¥õ·¥õ…™…¥…¢Íú±*
‚îÉ‚ñ∏‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ¬∑¬∑¬∑‡πè
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îà‚ä∑
‚ï≠‚îÅ‚îÅ„Äî *·¥á…¥·¥Ä ô ü·¥á·¥Ö / ·¥Ö…™Íú±·¥Ä ô ü·¥á·¥Ö* „Äï‚îÅ‚îÅ‚îà‚ä∑
‚îá‡πè *·¥Ä·¥ú·¥õ·¥è Íú±·¥õ·¥Ä·¥õ·¥úÍú±:* ${isEnabled(config.AUTO_STATUS_SEEN) ? "Enabled‚úÖ" : "Disabled‚ùå"}
‚îá‡πè *·¥Ä·¥ú·¥õ·¥è Íú±·¥õ·¥Ä·¥õ·¥úÍú±:* ${isEnabled(config.AUTO_STATUS_REPLY) ? "Enabled‚úÖ" : "Disabled‚ùå"}
‚îá‡πè *·¥Ä·¥ú·¥õ·¥è  Ä·¥á·¥ò ü è:* ${isEnabled(config.AUTO_REPLY) ? "Enabled‚úÖ" : "Disabled‚ùå"}
‚îá‡πè *·¥Ä·¥ú·¥õ·¥è Íú±·¥õ…™·¥Ñ·¥ã·¥á Ä:* ${isEnabled(config.AUTO_STICKER) ? "Enabled‚úÖ" : "Disabled‚ùå"}
‚îá‡πè *·¥Ä·¥ú·¥õ·¥è ·¥†·¥è…™·¥Ñ·¥á:* ${isEnabled(config.AUTO_VOICE) ? "Enabled‚úÖ" : "Disabled‚ùå"}
‚îá‡πè *·¥è·¥°…¥·¥á Ä  Ä·¥á·¥Ä·¥Ñ·¥õ:* ${isEnabled(config.OWNER_REACT) ? "Enabled‚úÖ" : "Disabled‚ùå"}
‚îá‡πè *·¥Ñ·¥úÍú±·¥õ·¥è·¥ç  Ä·¥á·¥Ä·¥Ñ·¥õÍú±:* ${isEnabled(config.CUSTOM_REACT) ? "Enabled‚úÖ" : "Disabled‚ùå"}
‚îá‡πè *·¥Ä·¥ú·¥õ·¥è  Ä·¥á·¥Ä·¥Ñ·¥õ:* ${isEnabled(config.AUTO_REACT) ? "Enabled‚úÖ" : "Disabled‚ùå"}
‚îá‡πè *·¥Ö·¥á ü·¥á·¥õ·¥á  ü…™…¥·¥ãÍú±:* ${isEnabled(config.DELETE_LINKS) ? "Enabled‚úÖ" : "Disabled‚ùå"}
‚îá‡πè *·¥Ä…¥·¥õ…™- ü…™…¥·¥ã:* ${isEnabled(config.ANTI_LINK) ? "Enabled‚úÖ" : "Disabled‚ùå"}
‚îá‡πè * ô·¥Ä·¥Ö ·¥°·¥è Ä·¥ÖÍú±:* ${isEnabled(config.ANTI_BAD) ? "Enabled‚úÖ" : "Disabled‚ùå"}
‚îá‡πè *·¥Ä·¥ú·¥õ·¥è ·¥õ è·¥ò…™…¥…¢:* ${isEnabled(config.AUTO_TYPING) ? "Enabled‚úÖ" : "Disabled‚ùå"}
‚îá‡πè *·¥Ä·¥ú·¥õ·¥è  Ä·¥á·¥Ñ·¥è Ä·¥Ö…™…¥…¢:* ${isEnabled(config.AUTO_RECORDING) ? "Enabled‚úÖ" : "Disabled‚ùå"}
‚îá‡πè *·¥Ä ü·¥°·¥Ä èÍú± ·¥è…¥ ü…™…¥·¥á:* ${isEnabled(config.ALWAYS_ONLINE) ? "Enabled‚úÖ" : "Disabled‚ùå"}
‚îá‡πè *·¥ò·¥ú ô ü…™·¥Ñ ·¥ç·¥è·¥Ö·¥á:* ${isEnabled(config.PUBLIC_MODE) ? "Enabled‚úÖ" : "Disabled‚ùå"}
‚îá‡πè * Ä·¥á·¥Ä·¥Ö ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥á:* ${isEnabled(config.READ_MESSAGE) ? "Enabled‚úÖ" : "Disabled‚ùå"}
‚ï∞‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÄ‚îÄ‚îà‚ä∑
> ·¥ç·¥Ä·¥Ö·¥á  ô è ·¥ä·¥á·¥ò ú·¥õ·¥á Ä ·¥õ·¥á·¥Ñ ú
> ${config.DESCRIPTION}`;

        // Pick random image from src/
        const imageDir = path.join(__dirname, "../src");
        const images = fs.readdirSync(imageDir).filter(file => file.match(/\.(jpg|png|webp)$/i));
        const randomImage = path.join(imageDir, images[Math.floor(Math.random() * images.length)]);

        // Pick random audio from audio/
        const audioDir = path.join(__dirname, "../audio");
        const audios = fs.readdirSync(audioDir).filter(file => file.match(/\.(mp3|mp4)$/i));
        const randomAudio = path.join(audioDir, audios[Math.floor(Math.random() * audios.length)]);

        // Verified contact (quoted base)
        const verifiedContact = {
            key: {
                fromMe: false,
                participant: `0@s.whatsapp.net`,
                remoteJid: "status@broadcast"
            },
            message: {
                contactMessage: {
                    displayName: "·¥äÍú∞x ·¥ç·¥Ö-x·¥†3",
                    vcard: "BEGIN:VCARD\nVERSION:3.0\nFN:·¥ä·¥á·¥ò ú·¥õ·¥á Ä ·¥õ·¥á·¥Ñ ú üßö‚Äç‚ôÄÔ∏è\nORG:V·¥á Ä·¥è…¥…™·¥Ñ·¥Ä BOT;\nTEL;type=CELL;type=VOICE;waid=2349046157539:+2349046157539\nEND:VCARD"
                }
            }
        };

        // Channel forwarding context (reusable)
        const channelContext = {
            mentionedJid: [m.sender],
            forwardingScore: 999,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterJid: '120363420646690174@newsletter',
                newsletterName: '·¥äÍú∞x ·¥ç·¥Ö-x·¥†3',
                serverMessageId: 143
            }
        };

        // Send image + caption with channel context
        await conn.sendMessage(from, { 
            image: fs.readFileSync(randomImage),
            caption: envSettings,
            contextInfo: channelContext
        }, { quoted: verifiedContact });

        // Send random audio (PTT style) with channel context
        await conn.sendMessage(from, { 
            audio: fs.readFileSync(randomAudio),
            mimetype: 'audio/mp4',
            ptt: true,
            contextInfo: channelContext
        }, { quoted: verifiedContact });

    } catch (error) {
        console.log(error);
        reply(`Error: ${error.message}`);
    }
});